{"ast":null,"code":"const API_BASE=process.env.REACT_APP_API_BASE_URL||'http://localhost:4000/api';export async function fetchUserTransactions(userId){const response=await fetch(`${API_BASE}/transactions/user/${userId}`);if(!response.ok){throw new Error('Failed to fetch transactions');}return response.json();}export const api={get:async endpoint=>{const response=await fetch(`${API_BASE}${endpoint}`);if(!response.ok){throw new Error(`GET ${endpoint} failed`);}return response.json();},post:async(endpoint,data)=>{const response=await fetch(`${API_BASE}${endpoint}`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)});if(!response.ok){throw new Error(`POST ${endpoint} failed`);}return response.json();}};export async function fetchFactories(){const response=await fetch(`${API_BASE}/factories`);if(!response.ok){throw new Error('Failed to fetch factories');}return response.json();}export async function fetchLogistics(){const response=await fetch(`${API_BASE}/logistics`);if(!response.ok){throw new Error('Failed to fetch logistics');}return response.json();}export async function fetchProducts(){const response=await fetch(`${API_BASE}/products`);if(!response.ok){throw new Error('Failed to fetch products');}return response.json();}export async function fetchOrders(){const response=await fetch(`${API_BASE}/orders`);if(!response.ok){throw new Error('Failed to fetch orders');}return response.json();}export async function fetchUsers(){const response=await fetch(`${API_BASE}/users`);if(!response.ok){throw new Error('Failed to fetch users');}return response.json();}export async function fetchUserById(userId){const response=await fetch(`${API_BASE}/users/${userId}`);if(!response.ok){throw new Error('Failed to fetch user');}return response.json();}export async function createOrder(orderData){const response=await fetch(`${API_BASE}/orders`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(orderData)});if(!response.ok){throw new Error('Failed to create order');}return response.json();}export async function updateOrder(orderId,orderData){const response=await fetch(`${API_BASE}/orders/${orderId}`,{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(orderData)});if(!response.ok){throw new Error('Failed to update order');}return response.json();}export async function deleteOrder(orderId){const response=await fetch(`${API_BASE}/orders/${orderId}`,{method:'DELETE'});if(!response.ok){throw new Error('Failed to delete order');}return response.json();}export async function createLogistics(logisticsData){const response=await fetch(`${API_BASE}/logistics`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(logisticsData)});if(!response.ok){throw new Error('Failed to create logistics');}return response.json();}export async function updateLogistics(logisticsId,logisticsData){const response=await fetch(`${API_BASE}/logistics/${logisticsId}`,{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(logisticsData)});if(!response.ok){throw new Error('Failed to update logistics');}return response.json();}// services/api.js\nexport async function fetchSales(){const response=await fetch('/api/sales');// 游대 Adjust endpoint if needed\nif(!response.ok){throw new Error('Failed to fetch sales data');}return response.json();}export async function fetchInventory(){const response=await fetch('/api/inventory');// 游대 Adjust endpoint if needed\nif(!response.ok){throw new Error('Failed to fetch inventory data');}return response.json();}export async function fetchReports(){const response=await fetch('/api/reports');// 游대 Adjust endpoint if needed\nif(!response.ok){throw new Error('Failed to fetch reports data');}return response.json();}export async function fetchNotifications(){const response=await fetch('/api/notifications');// 游대 Adjust endpoint if needed\nif(!response.ok){throw new Error('Failed to fetch notifications');}return response.json();}export async function fetchSettings(){const response=await fetch('/api/settings');// 游대 Adjust endpoint if needed\nif(!response.ok){throw new Error('Failed to fetch settings');}return response.json();}// services/api.js\nexport async function fetchSourcing(){const response=await fetch(`${API_BASE}/sourcing`);if(!response.ok){throw new Error('Failed to fetch sourcing data');}return response.json();}","map":{"version":3,"names":["API_BASE","process","env","REACT_APP_API_BASE_URL","fetchUserTransactions","userId","response","fetch","ok","Error","json","api","get","endpoint","post","data","method","headers","body","JSON","stringify","fetchFactories","fetchLogistics","fetchProducts","fetchOrders","fetchUsers","fetchUserById","createOrder","orderData","updateOrder","orderId","deleteOrder","createLogistics","logisticsData","updateLogistics","logisticsId","fetchSales","fetchInventory","fetchReports","fetchNotifications","fetchSettings","fetchSourcing"],"sources":["/workspaces/PKBS-Manager/PKBS webapp version/frontend/src/services/api.js"],"sourcesContent":["const API_BASE = process.env.REACT_APP_API_BASE_URL || 'http://localhost:4000/api';\n\nexport async function fetchUserTransactions(userId) {\n  const response = await fetch(`${API_BASE}/transactions/user/${userId}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch transactions');\n  }\n  return response.json();\n}\n\nexport const api = {\n  get: async (endpoint) => {\n    const response = await fetch(`${API_BASE}${endpoint}`);\n    if (!response.ok) {\n      throw new Error(`GET ${endpoint} failed`);\n    }\n    return response.json();\n  },\n\n  post: async (endpoint, data) => {\n    const response = await fetch(`${API_BASE}${endpoint}`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data),\n    });\n    if (!response.ok) {\n      throw new Error(`POST ${endpoint} failed`);\n    }\n    return response.json();\n  },\n};\n\nexport async function fetchFactories() {\n  const response = await fetch(`${API_BASE}/factories`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch factories');\n  }\n  return response.json();\n}\n\nexport async function fetchLogistics() {\n  const response = await fetch(`${API_BASE}/logistics`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch logistics');\n  }\n  return response.json();\n}\n\nexport async function fetchProducts() {\n  const response = await fetch(`${API_BASE}/products`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch products');\n  }\n  return response.json();\n}\n\nexport async function fetchOrders() {\n  const response = await fetch(`${API_BASE}/orders`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch orders');\n  }\n  return response.json();\n}\n\nexport async function fetchUsers() {\n  const response = await fetch(`${API_BASE}/users`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch users');\n  }\n  return response.json();\n}\n\nexport async function fetchUserById(userId) {\n  const response = await fetch(`${API_BASE}/users/${userId}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch user');\n  }\n  return response.json();\n}\n\nexport async function createOrder(orderData) {\n  const response = await fetch(`${API_BASE}/orders`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(orderData),\n  });\n  if (!response.ok) {\n    throw new Error('Failed to create order');\n  }\n  return response.json();\n}\n\nexport async function updateOrder(orderId, orderData) {\n  const response = await fetch(`${API_BASE}/orders/${orderId}`, {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(orderData),\n  });\n  if (!response.ok) {\n    throw new Error('Failed to update order');\n  }\n  return response.json();\n} \n\nexport async function deleteOrder(orderId) {\n  const response = await fetch(`${API_BASE}/orders/${orderId}`, {\n    method: 'DELETE',\n  });\n  if (!response.ok) {\n    throw new Error('Failed to delete order');\n  }\n  return response.json();\n}\n\nexport async function createLogistics(logisticsData) {\n  const response = await fetch(`${API_BASE}/logistics`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(logisticsData),\n  });\n  if (!response.ok) {\n    throw new Error('Failed to create logistics');\n  }\n  return response.json();\n}\n\nexport async function updateLogistics(logisticsId, logisticsData) {\n  const response = await fetch(`${API_BASE}/logistics/${logisticsId}`, {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(logisticsData),\n  });\n  if (!response.ok) {\n    throw new Error('Failed to update logistics');\n  }\n  return response.json();\n}\n\n// services/api.js\n\nexport async function fetchSales() {\n  const response = await fetch('/api/sales'); // 游대 Adjust endpoint if needed\n  if (!response.ok) {\n    throw new Error('Failed to fetch sales data');\n  }\n  return response.json();\n}\nexport async function fetchInventory() {\n  const response = await fetch('/api/inventory'); // 游대 Adjust endpoint if needed\n  if (!response.ok) {\n    throw new Error('Failed to fetch inventory data');\n  }\n  return response.json();\n} \n\nexport async function fetchReports() {\n  const response = await fetch('/api/reports'); // 游대 Adjust endpoint if needed\n  if (!response.ok) {\n    throw new Error('Failed to fetch reports data');\n  }\n  return response.json();\n}\n\nexport async function fetchNotifications() {\n  const response = await fetch('/api/notifications'); // 游대 Adjust endpoint if needed\n  if (!response.ok) {\n    throw new Error('Failed to fetch notifications');\n  }\n  return response.json();\n}\n\nexport async function fetchSettings() {\n  const response = await fetch('/api/settings'); // 游대 Adjust endpoint if needed\n  if (!response.ok) {\n    throw new Error('Failed to fetch settings');\n  }\n  return response.json();\n}\n\n// services/api.js\n\nexport async function fetchSourcing() {\n  const response = await fetch(`${API_BASE}/sourcing`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch sourcing data');\n  }\n  return response.json();\n}\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}